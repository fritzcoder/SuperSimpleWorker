{"name":"delayed_job.net","tagline":"A port of Delayed Job for Mono and Microsoft .NET","body":"# Delayed Job.net v0.1b\r\n*Not production ready, but can be used with assumption there may be bugs and edge cases not considered.*\r\n\r\nCross platform Status:\r\nOSX: **PASS**\r\nUbuntu: **PASS**\r\nWindows: **PASS** \r\n\r\nFor compiling please see the wiki at: \r\n\r\n\r\n\r\nCurrently being developed using mono and OSX. The goal of the project is to have it work equally across platforms. \r\n\r\nDelayed_job.net (or DJ.NET) encapsulates the common pattern of asynchronously executing longer tasks in the background.\r\n\r\nThis is ported and inspired from the original project:\r\nhttps://github.com/tobi/delayed_job\r\n\r\nI needed to have a simple job scheduler (cross platform) in my ASP.NET/MVC or Nancy (http://nancyfx.org) projects. There is no simple way of doing this without something heavy like MSMQ and no solution that works cross platform. Ruby and RoR have had many available solutions. \r\n\r\nThis can be used with Mono or Microsoft .Net framework. As well as cross platform Windows, OSX, and Linux. It can be used with other .NET projects as it is stand alone, not only web projects.\r\n\r\nIf you would like more in-depth information on use and FAQ please see the wiki: \r\n\r\nhttps://github.com/fritzcoder/delayed_job.net/wiki\r\n\r\nThere are two major components to Delayed_job.net:\r\n\r\n1. The DelayedJob assembly which gives your program access to creating jobs for scheduling\r\n\r\n2. worker.exe, this runs the jobs scheduled by your program. It can be run in the background. This process had to be separate as there is no rake interface with .net, where as ruby the worker process is run through rake. \r\n\r\nSome important notes:\r\n* worker.exe must currently be run on the same system as the code that is scheduling jobs. Unlike ruby, the serialisation process is different. \r\nC# cannot execute code stored in the database. It must be compiled into byte-code. Instead objects are serialised into xml in the database.\r\nThen the objects are deserialized using the dll file the job objects are defined. \r\n* a potential issue is when using this with mono and ASP.NET or ASP.NET MVC; when the webserver runs the web application it stores the assembly (dll) in a temporary directory. This temp directory is where delayed_job.net will store the path of the assembly to instantiate the objects when deserializing. Currently in testing this has not been a problem even during reboots of system or webserver. However, it may be possible for this directory to change making the jobs fail.  \r\n* classes and/or there instantiated objects must by serialisable, this also means that any class members are not serialisable, you must instantiate them in the perform method or a default constructor. To be serialisable you must have a default constructor and all values you want to be assigned on deserialization must be public members or public properties of a class. \r\n\r\n\r\nLike the ruby version of delayed_job some examples of use are: \r\n \r\n* sending massive newsletters\r\n* image resizing\r\n* http downloads\r\n* batch imports \r\n* spam checks \r\n\r\n## Setup\r\n\r\n1. Copy the DelayedJob.dll in your project bin folder.\r\n\r\n2. Using MonoDevelop or Visual Studio reference the DelayedJob.dll\r\n\r\n3. Create the delayed_job table in one of the supported databases. The sql table script can be found in the sql folder.\r\n\r\n4. Start creating jobs use The IJob interface and create your class:\r\n\r\n```\r\npublic class EmailJob : DelayedJob.IJob\r\n{\r\n\t//Make sure information you want to persist in the database is public\r\n\t//There is no way to serialize and deserialize private data.\r\n\tpublic string fromName = \"YourName\";\r\n\tpublic string toName = \"ToName\";\r\n\tpublic string fromAddress = \"email@gmail.com\";\r\n\tpublic string toAddress = \"toemail@gmail.com\";\r\n\tpublic const string fromPassword = \"\";\r\n\tpublic const string subject = \"DelayJob.net test\";\r\n\tpublic const string body = \"A automated test\";\r\n\t\r\n\tpublic void perform(){\r\n\t\tvar smtp = new SmtpClient\r\n\t\t{\r\n\t\t\tHost = \"smtp.gmail.com\",\r\n\t\t\tPort = 587,\r\n\t\t\tEnableSsl = true,\r\n\t\t\tDeliveryMethod = SmtpDeliveryMethod.Network,\r\n\t\t\tUseDefaultCredentials = false,\r\n\t\t\tCredentials = new NetworkCredential(fromAddress, fromPassword)\r\n\t\t};\r\n\t\tusing (var message = new MailMessage(fromAddress, toAddress)\r\n\t\t       {\r\n\t\t\tSubject = subject,\r\n\t\t\tBody = body\r\n\t\t})\r\n\t\t{\r\n\r\n\t\t\tServicePointManager.ServerCertificateValidationCallback = \r\n\t\t\t\tdelegate(object s, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) \r\n\t\t\t{ return true; };\r\n\t\t\tsmtp.Send(message);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n```\r\n\r\n5. Now schedule the job:\r\n\r\n```\r\n//Set the Repository with the database you would like to use with a\r\n//connection string. \r\nJob.Repository = new RepositoryMonoSQLite(\"URI=file:delayed_job.db\");\r\n//Enqueue the Job now. When the worker process runs it will execute the \r\n//perform method. In this case it will send an email.\r\nJob.Enqueue(new EmailJob());\r\n```\r\n\r\n5. The worker process needs to be configured. The worker.exe has a file called\r\nworker.exe.config. Configure the database you want to use and the connection string. \r\nIt Should be the same database you are enqueueing your jobs in. You can now \r\nrun worker process by:\r\n\r\n```\r\nmono worker.exe [optional name]\r\n```\r\n\r\nIn the background: \r\n\r\n```\r\nmono worker.exe &\r\n```\r\n\r\nOr on windows you can install it as a service.\r\n\r\n\r\nPlease see the wiki for more detailed information. \r\n\r\nThe library evolves around a delayed_jobs table which can be created by using:\r\n\r\n```\r\n  In the sql directory there is {db server type}.sql script. Run the script in    the database you wish to use. \r\n  Currently supporting: \r\n\tsqlite3 - Linux and OSX only (no windows support)\r\n\tMySql\r\n\tMicrosoft SQL Server (Tested on version 2012)\r\n```\r\n\r\nThe create table script looks as follows:\r\n* May differ slightly between database types *\r\n\r\n```\r\n  CREATE TABLE delay_jobs(\r\n  \tid integer not null primary key,  \r\n    assembly varchar(8000), \r\n\ttype varchar(255), \r\n\tpriority integer default 0,\r\n\tattempts integer default 0, \r\n\thandler varchar(255),\r\n\tlast_error varchar(255),\r\n\trun_at datetime default null,\r\n\tlocked_at datetime default null,\r\n\tfailed_at datetime default null,\r\n\tlocked_by varchar(255), \r\n\tcreated_at timestamp default current_timestamp, \r\n\tmodified_at timestamp default current_timestamp\r\n  )\r\n```\r\n\r\nOn failure, the job is scheduled again in 5 seconds + N ** 4, where N is the number of retries.\r\n\r\nBy default, it will delete failed jobs\r\n\r\nPlease report questions, feature requests and bugs to: \r\nhttps://github.com/fritzcoder/delayed_job.net/issues\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}